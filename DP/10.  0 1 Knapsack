0 1 Knapsack..........(Coding Ninjas) .........(Easy)


#include <bits/stdc++.h> 


// recursion solution TC -> O(2^N) SC ->O(N)
int solve(vector<int> weight, vector<int> value, int index, int capacity)
{
	if(index == 0)
	{
		if(weight[index] <= capacity)
			return value[index];
		
		return 0;
	}

	int include = 0;
	if(weight[index] <= capacity )
		include = value[index] + solve(weight, value, index-1, capacity-weight[index]);
	
	int exclude = 0+ solve(weight, value, index-1, capacity);

	return max(include, exclude);

}


// memoization solution TC -> O(N^2) SC ->O(N) + O(N^2) recursio stack space and dp space
int solveMem(vector<int> weight, vector<int> value, int index, int capacity, vector<vector<int>>&dp)
{
	if(index == 0)
	{
		if(weight[index] <= capacity)
			return value[index];
		
		return 0;
	}

	if(dp[index][capacity] != -1)
		return dp[index][capacity];

		
	int include = 0;
	if(weight[index] <= capacity )
		include = value[index] + solveMem(weight, value, index-1, capacity-weight[index],dp);
	
	int exclude = 0+ solveMem(weight, value, index-1, capacity, dp);
	dp[index][capacity] = max(include, exclude);
	return dp[index][capacity];

}


// tabulation method BUTTOM UP APPROACH TC->O(N^2) SC-> O(N^2)
int solveTab(vector<int> weight, vector<int> value, int n, int capacity)
{
	vector<vector<int>>dp(n, vector<int>(capacity+1, 0));

	for(int w = weight[0] ; w<= capacity ; w++)
	{
		if(dp[0][w] <= capacity)
			dp[0][w] = value[0];
		else
			dp[0][w] = 0;
	} 

	for(int i = 1; i< n ;i++)
	{
		for(int w = 0 ; w <= capacity ;w++)
		{
			int include = 0;
			if(weight[i] <= w)
				include = value[i] + dp[i-1][w-weight[i]];
			
			int exclude = dp[i-1][w];


			dp[i][w] = max(include, exclude);
		}
	}
	
	return dp[n-1][capacity];
}



// Optimal method  TC->O(N^2) SC-> O(N)
int solveOpt(vector<int> weight, vector<int> value, int n, int capacity)
{
	vector<int>prev (capacity+1, 0);
	vector<int>curr (capacity+1, 0);

	for(int w = weight[0] ; w<= capacity ; w++)
	{
		if(weight[0] <= capacity)
			prev[w] = value[0];
		else
			prev[w] = 0;
	} 

	for(int i = 1; i< n ;i++)
	{
		for(int w = 0 ; w <= capacity ;w++)
		{
			int include = 0;
			if(weight[i] <= w)
				include = value[i] + prev[w-weight[i]];
			
			int exclude = prev[w];


			curr[w] = max(include, exclude);
		}
		prev = curr;
	}
	
	return prev[capacity];
}


int knapsack(vector<int> weight, vector<int> value, int n, int maxWeight) 
{
	// return solve(weight, value, n-1, maxWeight);  // sending last index value-->n-1

	// vector<vector<int>> dp(n, vector<int>(maxWeight+1, -1));
	// return solveMem(weight, value, n-1, maxWeight, dp);

	// return solveTab(weight, value, n, maxWeight); // n -> total no. of items


	return solveOpt(weight, value, n,maxWeight);



}
