746. Min Cost Climbing Stairs ...(Leetcode).......


class Solution {
    private:
//**************************************************************************
    // Recursion + Memoization (Top Down)  
    // TC -> O(N)
    // SC -> O(N)

    
    int solve(vector<int> &cost, int n , vector<int> &dp)
    {
        // base case for start from 0 steps
        if(n == 0 ) 
           return  cost[0];
        
        // base case for start from 1 steps
        if(n == 1)
            return cost[1]; 
        
        if(dp[n] != -1)
            return dp[n];
        
        dp[n] = cost[n] + min(solve(cost, n-1, dp), solve(cost, n-2, dp));
        return dp[n];
    }


//*****************************************************************************
    // Tabulation (Buttom Up )
    // TC -> O(N)
    // SC -> O(N)
    int solve2(vector<int> & cost ,int n)
    {
        vector<int>dp(n+1);
        dp[0] = cost[0];
        dp[1] = cost[1];

        for(int i = 2 ; i< n  ; i++)
        {
            dp[i] = cost[i] + min(dp[i-1] , dp[i-2]);
        }

        return min(dp[n-1], dp[n-2]);
    }

    
//***************************************************************************************
    // OPTIMISED APPROACH 
    // TC -> O(N)
    // SC -> O(1)

    int solve3(vector<int> & cost ,int n)
    {
        
        int first = cost[0];
        int second = cost[1];

        for(int i = 2 ; i< n  ; i++)
        {
            int curr = cost[i] + min(first, second);
            first = second;
            second = curr;
        }

        return min(first, second);
    }


public:
    int minCostClimbingStairs(vector<int>& cost) {
       int n = cost.size();
      // vector<int> dp(n+1, -1);

       // cost minimum from 0 steps or 1 steps
       //int ans = min(solve(cost, n-1, dp), solve(cost, n-2, dp));
       //return ans; 


    //    return solve2(cost, n);

    
       return solve3(cost, n);
    }
};
