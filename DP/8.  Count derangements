Count derangements  ..........(Conding Ninjas)...........


#define mod 1000000007
#include<vector>
//******************************************************************************************
// Using Recursion (TLE)
// TC -> O(2^N)
// long long int countDerangements(int n) {
   
//    // base case 
//    if(n==1)
//         return 0;
//     if(n == 2)
//         return 1;
    
//     int ans = (((n-1)%mod)*((countDerangements(n-1)%mod)+(countDerangements(n-2)%mod)));

//     return ans%mod;
// }

//******************************************************************************************

// // Using Recursion + Memoization ....
// TC -> O(N)
//SC -> O(N) + O(N)

// long long int solve(int n, vector<long long int>& dp) {
   
   
//    // base case 
//    if(n==1)
//         return 0;

//     if(n == 2)
//         return 1;


//     if(dp[n] != -1)
//         return dp[n];


//     dp[n] = (((n-1)%mod)*((solve(n-1,dp)%mod)+(solve(n-2,dp)%mod)))%mod;

//     return dp[n];
// }

//******************************************************************************************

// Using Tabulation...
// TC -> O(N)
// SC -> O(N)

long long int solve1(int n) {
   
   vector<long long int>dp(n+1 , -1);
   dp[1] = 0;
   dp[2] = 1;
    
    for(int i = 3 ; i<= n ;i++)
    {
        long long int first = dp[i-1]%mod;
        long long int second = dp[i-2]%mod;
        long long int sum = (first+second)%mod;
        long long int ans = ((i-1)*sum)%mod;
        dp[i] = ans;

    }

    return dp[n];
}

//******************************************************************************************

// OPTIMAL SOLUTION..
//TC -> O(N)
// SC -> O(1)

long long int solve2(int n) {
   
   
   long long int prev2 = 0;  // dp[1] = 0
   long long int prev1 = 1;  // dp[2] = 1
   
    
    for(int i = 3 ; i<= n ;i++)
    {
        long long int first = prev1%mod;
        long long int second = prev2%mod;
        long long int sum = (first+second)%mod;
        long long int ans = ((i-1)*sum)%mod;
        prev2 = prev1;
        prev1 = ans;



    }

    return prev1;
}

long long int countDerangements(int n) {
   
  

//   return solve(n);
//   return solve1(n);
  return solve2(n);
}
